# 打开sql输出日志
spring.shardingsphere.props.sql.show=true
# 是否在启动时检查分表元数据一致性
spring.shardingsphere.props.check.table.metadata.enabled=false

# 配置读写分离主从数据库的逻辑数据源，这里ds0表示一个主从库
# spring.shardingsphere.sharding.master-slave-rules.ds0.master-data-source-name=dbnode1
# spring.shardingsphere.sharding.master-slave-rules.ds0.slave-data-source-names=dbslave1

# 指定t_order分库的分片策略，以user_id作为分片键
# ShardingJDBC支持以下几种分片策略：
# standard 标准分片策略、complex 复合分片策略、inline 行表达式分片策略、Hint分片策略、none不分片策略
# 针对没有分库的表对象（如t_user），不用配置分库策略，但需要配置数据节点（actual-data-nodes）
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.algorithm-expression=dbnode$->{user_id % 2 + 1}
# 可以指定默认的分库策略
# 注意这里分库是一个读写分离的主从库ds0（master-slave-rules）
# spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
# spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{user_id % 2 + 1}

# 指定t_order表的数据分布情况，配置数据节点
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=dbnode$->{1..2}.t_order_$->{1..2}
spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=mystudio.t_user
# 如果配置了主从数据库读写分离，表的数据源示例应该用主从库ds0
# spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=ds0.t_user

# 指定t_order表的主键生成策略SNOWFLAKE（雪花算法）
# t_user没有进行分库分表，这里可以指定主键的生成策略，也可以由程序自己控制
spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE

# 指定t_order分表的分片策略，分片策略包括分片键和分片算法
# 内置的分片策略大致分为：尾数取模、哈希、范围、标签、时间等。
# 由用户配置的分片策略则更加灵活，采用Groovy行表达式配置分片策略
# 如：t_user_$->{uid % 8} 表示t_user表根据uid模8，分成8张表，表名为t_user_0到t_user_7
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=order_id
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{order_id % 2 + 1}
# 表t_user没有分表，这里可以配置分表的分片策略（也可不配置），为后期可能的分表做预备
# spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.sharding-column=user_id
# spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user

# 指定公共表（广播表），这里配置的是逻辑表，多表间通过","分隔
spring.shardingsphere.sharding.broadcast-tables=t_dict
